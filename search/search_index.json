{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Index","text":"Welcome to qqqsw's note!  <p> My friends! /  About Me"},{"location":"about/","title":"About","text":"<ul> <li>\u200b\u540e\u200b\u7aef\u200b\u5b66\u4e60\u200b\u4e2d\u200b\uff0c\u200b\u52aa\u529b\u200b\u6210\u4e3a\u200b\u5168\u6808\u200b\u5f00\u53d1\u200b\ud83d\ude3c\ud83d\ude3a</li> </ul>"},{"location":"CS/","title":"Computer Science Basic","text":"<p>Abstract</p> <p>\u200b\u672c\u200b\u90e8\u5206\u200b\u5185\u5bb9\u200b\uff08\u200b\u9664\u200b\u7279\u522b\u200b\u58f0\u660e\u200b\u5916\u200b\uff09\u200b\u91c7\u7528\u200b CC BY-NC-SA 4.0 \u200b\u8bb8\u53ef\u200b\u534f\u8bae\u200b\u3002</p>"},{"location":"CS/#cs61b","title":"CS61B","text":"<ul> <li>Lec19\u2014\u2014\u200b\u54c8\u5e0c\u200b\uff08Hashing\uff09</li> </ul>"},{"location":"CS/CS61b-Lec19-Hashing/","title":"CS61b_Lec19_Hashing","text":"<p>\u200b\u7406\u89e3\u200bhash table\uff0c\u200b\u8ba9\u200b\u6211\u4eec\u200b\u4ece\u200b\u6700\u200b\u7b80\u5355\u200b\u7684\u200b\u5f00\u59cb\u200b\uff1a</p>"},{"location":"CS/CS61b-Lec19-Hashing/#dataindexedarray","title":"DataIndexedArray","text":"<p>Create an array of booleans indexed by data! - Initially all values are false. - When an item is added, set appropriate index to true. \u200b\u6dfb\u52a0\u200b\u4e86\u200b0\u30015\u300110\u200b\u5728\u200b\u8fd9\u4e2a\u200bDataIndexedArray\u200b\u91cc\u200b\uff1a</p> <p></p> <p>\u200b\u5982\u679c\u200b\u7528\u200b\u8fd9\u6837\u200b\u7684\u200b\u6570\u7ec4\u200b\u6765\u5b58\u200b\u6570\u636e\u200b\u7684\u8bdd\u200b\uff0c\u200b\u4ec5\u4ec5\u200b\u662f\u200b\u5b58\u200b\u6570\u5b57\u200b\u5c31\u200b\u9700\u8981\u200b\u5f88\u591a\u200b\u7a7a\u95f4\u200b\uff0c\u200b\u5e76\u4e14\u200b\u8fd8\u200b\u5f88\u200b\u6d6a\u8d39\u200b\uff0c\u200b\u800c\u4e14\u200b\u4e00\u4e9b\u200b\u5176\u4ed6\u200b\u7684\u200b\u6570\u636e\u200b\uff0c\u200b\u6bd4\u5982\u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u6c49\u5b57\u200b\u8fd9\u4e9b\u200b\u6ca1\u6cd5\u200b\u5b58\u200b\uff0c\u200b\u867d\u7136\u200b\u5b83\u200b\u5f88\u5feb\u200b\uff1a </p> <p>\u200b\u63a5\u4e0b\u6765\u200b\u6211\u4eec\u200b\u7ee7\u7eed\u200b\u6539\u8fdb\u200b\uff1a \u200b\u5f00\u59cb\u200b\u5b58\u200b\u5b57\u7b26\u4e32\u200b\u8fdb\u53bb\u200b\uff0c\u200b\u6bd4\u5982\u200bcat\u3001dog\u200b\u8fd9\u4e9b\u200b\uff0c\u200b\u6570\u5b57\u200b\u662f\u200b\u672c\u8eab\u200b\u5c31\u662f\u200bindex\uff0c\u200b\u800c\u200b\u5b57\u7b26\u4e32\u200b\u5982\u679c\u200b\u53ea\u662f\u200b\u7528\u200b\u9996\u4f4d\u200b\u7684\u8bdd\u200b\u5c31\u200b\u5f88\u200b\u5bb9\u6613\u200b\u4ea7\u751f\u200b\u51b2\u7a81\u200b --- cat\u200b\u5b58\u200b\u7b2c\u4e09\u4e2a\u200b\uff0c\u200b\u90a3\u200b\u6211\u200bcap\u200b\u5b58\u200b\u7b2c\u51e0\u4e2a\u200b\u5462\u200b\uff1f</p>"},{"location":"CS/CS61b-Lec19-Hashing/#avoiding-collisions","title":"Avoiding Collisions","text":"<p>Use all digits by multiplying each by a power of 27.  \u200b\u8fd9\u79cd\u200b\u7b97\u200bindex\u200b\u7684\u200b\u65b9\u6cd5\u200b\u548c\u200b\u8fdb\u5236\u200b\u5f88\u200b\u50cf\u200b\uff1a </p> <p>\u200b\u4e0a\u9762\u200b\u53ea\u5b58\u200b\u4e86\u200b\u5c0f\u5199\u5b57\u6bcd\u200b\uff0c\u200b\u975e\u5e38\u200b\u53d7\u9650\u200b\uff0c\u200b\u6211\u4eec\u200b\u518d\u200b\u4e00\u6b21\u200b\u6539\u8fdb\u200b\uff1a \u200b\u5148\u200b\u5f15\u5165\u200bascii\u200b\u7684\u200b\u6982\u5ff5\u200b\uff0c\u200b\u7b2c\u200b33 - 126\u200b\u4f4d\u662f\u200b\u53ef\u89c1\u200b\u5b57\u7b26\u200b\uff0c\u200b\u8d85\u51fa\u200bascii\u200b\u5c31\u662f\u200bunicode\u200b\u4e86\u200b\uff0c\u200b\u6269\u5927\u200b\u57fa\u6570\u200b\uff08base\uff09 \u200b\u4e3e\u4f8b\u200b\u4e00\u4e2a\u200b\u4e2d\u6587\u200b\u77ed\u8bed\u200b\u7f16\u7801\u200b\uff08unicode\uff09 </p>"},{"location":"CS/CS61b-Lec19-Hashing/#integer-overflow","title":"Integer Overflow","text":"<p>\u200b\u6570\u200b\u7684\u200b\u5927\u5c0f\u200b\u6709\u200b\u9650\u5236\u200b\uff0c\u200b\u8d85\u51fa\u200b\u5219\u200b\u4f1a\u200b\u6ea2\u51fa\u200b\uff0c\u200b\u8fd9\u200b\u5c31\u200b\u5bfc\u81f4\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u6709\u200b\u4e24\u4e2a\u200b\u7b97\u200b\u51fa\u6765\u200b\u662f\u200b\u4e00\u6837\u200b\u7684\u200bindex\uff0c\u200b\u5c31\u662f\u200b\u51b2\u7a81\u200b\uff1a </p> <p>\uff08\u200b\u7bad\u5934\u200b\u90a3\u91cc\u200b\u662f\u200b\u8fd4\u56de\u200btrue\u200b\u4e86\u200b\uff09</p> <p>Overflow can result in collisions, causing incorrect answers.</p> <p>\u200b\u5f15\u5165\u200bPigeonhole Principle\uff1a \u200b\u5927\u81f4\u200b\u610f\u601d\u200b\u662f\u200b\u5341\u4e2a\u200b\u9e3d\u5b50\u200b\u653e\u5165\u200b\u4e5d\u4e2a\u200b\u7b3c\u5b50\u200b\u4e2d\u200b\uff0c\u200b\u5fc5\u5b9a\u200b\u6709\u200b\u4e00\u4e2a\u200b\u7b3c\u5b50\u200b\u6709\u200b\u4e24\u53ea\u200b\u9e1f\u200b\uff08\u200b\u6bcf\u4e2a\u200b\u7b3c\u5b50\u200b\u90fd\u200b\u9700\u8981\u200b\u6709\u200b\u9e3d\u5b50\u200b\uff09 \u200b\u6f5c\u5728\u200b\u54c8\u5e0c\u200b\u51b2\u7a81\u200b\uff1a\u200b\u9879\u76ee\u200b\u6570\u91cf\u200b\u8d85\u8fc7\u200b\u4e86\u200b\u54c8\u5e0c\u200b\u51fd\u6570\u200b\u7684\u200b\u8f93\u51fa\u200b\u60c5\u51b5\u200b Pigeonhole principle tells us that collisions are inevitable due to integer overflow\u200b\u51b2\u7a81\u200b\u65e0\u6cd5\u200b\u907f\u514d\u200b</p> <p>\u200b\u90a3\u4e48\u200b\uff1a - \u200b\u5982\u4f55\u200b\u89e3\u51b3\u200b\u54c8\u5e0c\u200b\u51b2\u7a81\u200b\uff08collision handling\uff09 - \u200b\u5982\u4f55\u200b\u8ba1\u7b97\u200b\u4efb\u610f\u200b\u4e00\u4e2a\u200bobject\u200b\u7684\u200b\u54c8\u5e0c\u200b\u7801\u200b\uff1f\uff08computing a hashCode\uff09</p>"},{"location":"CS/CS61b-Lec19-Hashing/#make-a-bucket","title":"Make a Bucket","text":"<p>\u200b\u522b\u6025\u200b\uff0c\u200b\u63a5\u7740\u200b\u7ee7\u7eed\u200b\u6539\u8fdb\u200b\uff1a Suppose N items have the same numerical representation h: - Instead of storing true in position h, store a \u201cbucket\u201d of these N items at position h.</p> <p>How to implement a \u201cbucket\u201d\uff1f - Conceptually simplest way: LinkedList. - Could also use ArrayLists. - Could also use an ArraySet. - Will see it doesn\u2019t really matter what you do. bucket\u200b\u672c\u8eab\u200b\u7684\u200b\u6027\u8d28\u200b\u5e76\u200b\u4e0d\u200b\u91cd\u8981\u200b</p> <p>\u200b\u6709\u200b\u51b2\u7a81\u200b\u7684\u8bdd\u200b\u76f4\u63a5\u200b\u5168\u200b\u585e\u8fdb\u200b\u539f\u5730\u200b\uff0chash table\u200b\u521d\u5177\u200b\u96cf\u5f62\u200b </p> <p>\u200b\u4f46\u662f\u200b\u6211\u4eec\u200b\u4e0d\u200b\u9700\u8981\u200b\u8fd9\u4e48\u200b\u957f\u200b\u7684\u200blist\uff0cso looong \u200b\u7684\u200bbucket\uff0c\u200b\u8fd9\u200b\u4e0d\u200b\u8ddf\u200b\u94fe\u8868\u200b\u6ca1\u5dee\u200b\u5417\u200b\u3002 \u200b\u7b54\u6848\u200b\u662f\u6a21\u200b\uff0c\u200b\u628a\u200b\u957f\u957f\u7684\u200bbucket\u200b\u65a9\u65ad\u200b\u5206\u200b\u5230\u200b\u5176\u4ed6\u200bbucket\u200b\u91cc\u200b\u53bb\u200b</p>"},{"location":"CS/CS61b-Lec19-Hashing/#hash-table","title":"Hash Table","text":"<p>\u200b\u7136\u540e\u200b\u00a0hash table\u200b\u4e0a\u573a\u200b\uff01\uff01 - Data is converted by a hash function into an integer representation called a hash code.\u00a0 - The hash code is then reduced to a valid index, usually using the modulus operator, e.g. 2348762878 % 10 = 8. </p>"},{"location":"CS/CS61b-Lec19-Hashing/#hash-table-runtime","title":"Hash Table Runtime","text":"<ul> <li>The good news: We use way less memory and can now handle arbitrary data.</li> <li>The bad news: Worst case runtime is now \u0398(Q), where Q is the length of the longest list.</li> </ul> <p>find x\u200b\u7684\u200b\u7b97\u6cd5\u200bscale\uff1a </p>"},{"location":"CS/CS61b-Lec19-Hashing/#load-factor","title":"Load factor","text":"<p>\u200b\u8fd9\u6837\u200b\u663e\u7136\u200b\u4e0d\u200b\u592a\u884c\u200b\uff0c\u200b\u90fd\u200bN\u200b\u4e86\u200b\u4f60\u200b\u8fd8\u200b\u4e0d\u5982\u200b\u76f4\u63a5\u200b\u4e0a\u200b\u94fe\u8868\u200b\u5462\u200b\uff0c\u200b\u7ee7\u7eed\u200b\u6539\u8fdb\u200b\uff1a Suppose we have: - An increasing number of buckets M. - An increasing number of items N. As long as M = \u0398(N), then O(N/M) = O(1).</p> <p>N\u200b\u5728\u200b\u53d8\u5927\u200b\u7684\u200b\u540c\u65f6\u200b\uff0cbucket\u200b\u7684\u200b\u6570\u91cf\u200b\u4e5f\u200b\u8ddf\u7740\u200b\u5927\u200b\uff0c\u200b\u76f8\u6bd4\u200b\u4e00\u9664\u200b\u5c31\u662f\u200b1\u200b\u4e86\u200b\uff0c\u200b\u4e4b\u524d\u200b\u90a3\u4e2a\u200bbucket\u200b\u5b9a\u6b7b\u200b\u7684\u200b\u662f\u200bN/5\uff0c\u200b\u4e0d\u200b\u5c31\u662f\u200bN\u3002\u200b\u5b9e\u73b0\u200b\u7684\u200b\u5927\u81f4\u200b\u65b9\u6cd5\u200b\u662f\u200b\u5224\u65ad\u200bN/M\u200b\u7684\u200b\u6bd4\u503c\u200b\uff0c\u200b\u6bd4\u5982\u200b &gt; 5\u200b\u65f6\u200bM double\u200b\u4e00\u4e0b\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u7684\u200b\u6bd4\u503c\u200b\u5c31\u662f\u200b\u4e0b\u9762\u200b\u7684\u200bload factor</p> <p>Even distribution of item is critical for good hash table performance.</p> <ul> <li>Both tables below have load factor of N/M = 1.</li> <li>Left table is much worse!<ul> <li>Contains is \u0398(N) for x. </li> </ul> </li> </ul> <p>Default implementation simply returns the memory address of the object. Java\u200b\u91cc\u9762\u200b\u9ed8\u8ba4\u200b\u7684\u200bhashcode\u200b\u5c31\u662f\u200b\u8fd4\u56de\u200b\u5f53\u524d\u200bobject\u200b\u7684\u200b\u5730\u5740\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u65b9\u6cd5\u200b\u771f\u200b\u806a\u660e\u200b\u3002</p>"},{"location":"CS/CS61b-Lec19-Hashing/#warning","title":"Warning","text":"<ul> <li>Never store objects that can change in a HashSet or HashMap!</li> <li>Never override equals without also overriding hashCode.</li> </ul>"},{"location":"CS/test/","title":"Test","text":"<p>Note</p>"}]}